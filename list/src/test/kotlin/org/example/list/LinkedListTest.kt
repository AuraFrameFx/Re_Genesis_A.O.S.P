/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example.list

import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.Test

class LinkedListTest {
    @Test
    fun testConstructor() {
        val list = LinkedList()
        assertEquals(0, list.size)
    }

    @Test
    fun testAdd() {
        val list = LinkedList()

        list.add("one")
        assertEquals(1, list.size)
        assertEquals("one", list.get(0))

        list.add("two")
        assertEquals(2, list.size)
        assertEquals("two", list.get(1))
    }

    @Test
    fun testRemove() {
        val list = LinkedList()

        list.add("one")
        list.add("two")
        assertTrue(list.remove("one"))

        assertEquals(1, list.size)
        assertEquals("two", list.get(0))

        assertTrue(list.remove("two"))
        assertEquals(0, list.size)
    }

    @Test
    fun testRemoveMissing() {
        val list = LinkedList()

        list.add("one")
        list.add("two")
        assertFalse(list.remove("three"))
        assertEquals(2, list.size)
    }
}

/*
 * Additional edge-case and robustness tests for LinkedList.
 * Testing library/framework: JUnit 5 (JUnit Jupiter) with Kotlin.
 */

class LinkedListEdgeCasesTest {

    @Test
    fun getFromEmptyThrows() {
        val list = LinkedList()
        assertThrows(IndexOutOfBoundsException::class.java) {
            list.get(0)
        }
    }

    @Test
    fun getNegativeIndexThrows() {
        val list = LinkedList()
        list.add("one")
        assertThrows(IndexOutOfBoundsException::class.java) {
            list.get(-1)
        }
    }

    @Test
    fun getIndexEqualToSizeThrows() {
        val list = LinkedList()
        list.add("one")
        list.add("two")
        // size == 2; accessing index 2 should throw
        assertThrows(IndexOutOfBoundsException::class.java) {
            list.get(2)
        }
    }

    @Test
    fun removeFromEmptyReturnsFalse() {
        val list = LinkedList()
        assertFalse(list.remove("ghost"))
        assertEquals(0, list.size)
    }

    @Test
    fun removeHeadUpdatesHead() {
        val list = LinkedList()
        list.add("one")
        list.add("two")
        list.add("three")

        val removed = list.remove("one")
        assertTrue(removed)
        assertEquals(2, list.size)
        assertEquals("two", list.get(0))
        assertEquals("three", list.get(1))
    }

    @Test
    fun removeTailWorks() {
        val list = LinkedList()
        list.add("one")
        list.add("two")
        list.add("three")

        assertTrue(list.remove("three"))
        assertEquals(2, list.size)
        assertEquals("one", list.get(0))
        assertEquals("two", list.get(1))
        assertThrows(IndexOutOfBoundsException::class.java) { list.get(2) }
    }

    @Test
    fun removeMiddleWorks() {
        val list = LinkedList()
        list.add("one")
        list.add("two")
        list.add("three")

        assertTrue(list.remove("two"))
        assertEquals(2, list.size)
        assertEquals("one", list.get(0))
        assertEquals("three", list.get(1))
    }

    @Test
    fun removeFirstOccurrenceWhenDuplicatesExist() {
        val list = LinkedList()
        list.add("dup")
        list.add("keep")
        list.add("dup")
        list.add("tail")

        assertTrue(list.remove("dup"))
        assertEquals(3, list.size)
        // First "dup" removed; remaining order should be stable
        assertEquals("keep", list.get(0))
        assertEquals("dup", list.get(1))
        assertEquals("tail", list.get(2))
    }

    @Test
    fun removingSameElementMultipleTimesBehavesCorrectly() {
        val list = LinkedList()
        list.add("one")
        list.add("two")

        assertTrue(list.remove("two"))
        assertFalse(list.remove("two"))
        assertEquals(1, list.size)
        assertEquals("one", list.get(0))
    }

    @Test
    fun addManyItemsAndRandomAccess() {
        val list = LinkedList()
        for (i in 0 until 100) {
            list.add(i.toString())
        }
        assertEquals(100, list.size)
        assertEquals("0", list.get(0))
        assertEquals("50", list.get(50))
        assertEquals("99", list.get(99))
    }

    @Test
    fun complexMutationScenarioMaintainsCorrectOrder() {
        val list = LinkedList()
        list.add("a")
        list.add("b")
        list.add("c")
        list.add("d")

        assertTrue(list.remove("a")) // remove head
        assertTrue(list.remove("c")) // remove middle from [b, c, d] -> [b, d]

        assertEquals(2, list.size)
        assertEquals("b", list.get(0))
        assertEquals("d", list.get(1))
        assertThrows(IndexOutOfBoundsException::class.java) { list.get(2) }
    }

    @Test
    fun removeAllOccurrencesByLoopLeavesOnlyNonMatchingElements() {
        val list = LinkedList()
        list.add("x")
        list.add("y")
        list.add("x")
        list.add("z")
        list.add("x")

        while (list.remove("x")) {
            // keep removing until no "x" remains
        }

        assertEquals(2, list.size)
        assertEquals("y", list.get(0))
        assertEquals("z", list.get(1))
        for (i in 0 until list.size) {
            assertNotEquals("x", list.get(i))
        }
    }
}

/*
 * Additional scenario-based tests appended by test generation.
 * Testing library/framework: JUnit 5 (JUnit Jupiter) with Kotlin.
 */
class LinkedListAdditionalScenariosTest {

    @Test
    fun removeOnlyElementFromSingletonList() {
        val list = LinkedList()
        list.add("only")
        assertTrue(list.remove("only"))
        assertEquals(0, list.size)
        assertThrows(IndexOutOfBoundsException::class.java) { list.get(0) }
    }

    @Test
    fun interleavedAddRemoveMaintainsCorrectSizeAndOrder() {
        val list = LinkedList()
        list.add("a")
        list.add("b")
        assertTrue(list.remove("a"))
        list.add("c")
        list.add("d")
        assertTrue(list.remove("c"))
        list.add("e")
        assertEquals(3, list.size)
        assertEquals("b", list.get(0))
        assertEquals("d", list.get(1))
        assertEquals("e", list.get(2))
    }

    @Test
    fun duplicateRemovalRemovesNextOccurrenceOnSecondCall() {
        val list = LinkedList()
        list.add("dup")
        list.add("x")
        list.add("dup")
        assertTrue(list.remove("dup"))
        assertTrue(list.remove("dup"))
        assertFalse(list.remove("dup"))
        assertEquals(1, list.size)
        assertEquals("x", list.get(0))
    }

    @Test
    fun removingEveryTenthFromLargeListKeepsRemainingOrder() {
        val list = LinkedList()
        for (i in 0 until 100) list.add(i.toString())
        // Remove "0","10","20",..."90"
        for (i in 0 until 100 step 10) {
            assertTrue(list.remove(i.toString()))
        }
        assertEquals(90, list.size)
        // Spot-check ordering after removals
        assertEquals("1", list.get(0))
        assertEquals("2", list.get(1))
        assertEquals("9", list.get(8))
        assertEquals("11", list.get(9))
        assertEquals("99", list.get(89))
    }

    @Test
    fun getVeryLargeIndexThrows() {
        val list = LinkedList()
        list.add("a")
        assertThrows(IndexOutOfBoundsException::class.java) { list.get(1000) }
    }

    @Test
    fun sizeUnchangedByGetOperations() {
        val list = LinkedList()
        list.add("a"); list.add("b"); list.add("c")
        val sizeBefore = list.size
        assertEquals("a", list.get(0))
        assertEquals("b", list.get(1))
        assertEquals("c", list.get(2))
        assertEquals(sizeBefore, list.size)
    }

    @Test
    fun removeUntilEmptyThenAddAgainWorks() {
        val list = LinkedList()
        list.add("a")
        list.add("b")
        assertTrue(list.remove("a"))
        assertTrue(list.remove("b"))
        assertEquals(0, list.size)
        // List should be reusable after becoming empty
        list.add("c")
        assertEquals(1, list.size)
        assertEquals("c", list.get(0))
    }

    @Test
    fun failedRemoveDoesNotChangeOrderOrSize() {
        val list = LinkedList()
        list.add("a")
        list.add("b")
        assertFalse(list.remove("ghost"))
        assertEquals(2, list.size)
        assertEquals("a", list.get(0))
        assertEquals("b", list.get(1))
    }
}
